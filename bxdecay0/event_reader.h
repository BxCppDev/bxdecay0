#ifndef BXDECAY0_EVENT_READER_H
#define BXDECAY0_EVENT_READER_H

// Standard library:
//#include <list>
#include <vector>
#include <string>
#include <memory>

// This project:
#include <bxdecay0/event.h>

namespace bxdecay0 {

  /// \brief Event reader (using ascii formatted files as generated by the bxdecay0-run program)
  class event_reader
  {
    
  public:
    
    /// \brief Reader configuration
    struct config_type
    {
      std::vector<std::string> event_files; ///< Ordered list of decay event input files
      int start_event   = 0; ///< Counter of the first event to load from the aggregated stream of input files 
      int max_nb_events = 0; ///< Maximum number of events to be loaded before considering the reader to be terminated
      bool zero_event_time = false; ///< Flag to force the decay event time to zero
    };

    event_reader(int verbosity_ = 0);

    event_reader(const config_type & config_, int verbosity_ = 0);

    ~event_reader();

    void set_verbosity(int verbosity_);

    int get_verbosity() const;
    
    /// Check if the reader runs in info mode
    bool is_info() const;

    /// Check if the reader runs in debug mode
    bool is_debug() const;
 
    /// Check if the reader runs in trace mode
    bool is_trace() const;
 
    void set_configuration(const config_type & config_);

    void reset_configuration();

    const config_type & get_configuration() const;

    /// Check if the reader is configured
    bool is_configured() const;

    /// Check if the reader has terminated its input
    bool is_terminated() const;
    
    /// Check if a next event is available
    bool has_next_event() const;
    
    /// Attempt to load a next event from input data files
    void load_next_event(event &);

    /// Return the counter of parsed events
    int get_parsed_event_counter() const;

    /// Return the counter of loaded events
    int get_loaded_event_counter() const;

    /// Return the current file index
    int get_current_file_index() const;

    /// Return the last event index in the current file
    int get_last_event_in_file_index() const;

  private:

    void _at_configure_();

    void _at_unconfigure_();
   
    bool _check_next_event_();
   
    void _open_new_file_();
  
    void _close_current_file_();
    
  private:

    int         _verbosity_ = 0;       ///< Verbosity level (0=mute, 1=info, 2=debug, 3=trace)
    config_type _config_;              ///< Configuration
    bool        _configured_ = false;  ///< Configuration status flag
    bool        _terminated_ = false;  ///< Termination flag (reader has loaded all events from input files)

    // PIMPL support:
    struct pimpl_type;
    std::unique_ptr<pimpl_type> _pimpl_; ///< Private implementation
    
  };

} // end of namespace bxdecay0

#endif // BXDECAY0_EVENT_READER_H

// Local Variables: --
// mode: c++ --
// End: --
