// clang-format off

// bxdecay0/resource.cc
// Copyright 2019 F. Mauger
//
// This program is free software: you  can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free  Software Foundation, either  version 3 of the  License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Ourselves:
#include <bxdecay0/resource.h>

// Standard Library:
#include <iostream>
#include <string>
#include <fstream>
#include <cstdlib>
#include <stdexcept>

// Relocation:
#include "relocatable_lib.h"

namespace {

  //! Return relative path from application directory to root of resource dir
  std::string relative_lib_path_to_resource_dir() {
    return "@BxDecay0_LIBDIR_TO_RESOURCEDIR@";
  }

  //! Return the path to the root resource directory
  std::string get_resource_root(bool overriden_env_) {
    static std::string _install_resource_root;
    if (_install_resource_root.empty()) {
      if (overriden_env_) {
        const char * env_key = "BXDECAY0_RESOURCE_DIR";
        if (std::getenv(env_key) != nullptr) {
          _install_resource_root = std::string(std::getenv(env_key));
        }
      }
      if (_install_resource_root.empty()) {
        std::string lib_dir = bxdecay0::get_library_dir();
        // std::cerr << "[devel] lib_dir = " << lib_dir << '\n';
        _install_resource_root = lib_dir + "/" + relative_lib_path_to_resource_dir();
      }
    }
    return _install_resource_root;
  }

} // namespace

namespace bxdecay0 {

  std::string get_resource_dir(bool overriden_env_)
  {
    return ::get_resource_root(overriden_env_);
  }

  std::string get_resource(const std::string & rname_, bool overriden_env_)
  {
    if (rname_[0] == '/') {
      throw std::logic_error("Invalid resource name '" + rname_ + "'!");
    }

    std::string fullpath(::get_resource_root(overriden_env_) + "/" + rname_);
    std::ifstream check(fullpath.c_str());
    if (!check.good()) {
      throw unreadable_resource_exception("Unreadable resource '" + fullpath + "'!");
    }
    return fullpath;
  }

} // end of namespace bxdecay0
