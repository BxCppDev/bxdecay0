// clang-format off
#include "relocatable_lib.h"

// Standard Library:
#include <string>
#include <stdexcept>
#include <iostream>

#include <mutex>
#include <thread>
#include <random>
#include <chrono>

#include "BinReloc.h"

namespace {

  //! Convert BrInitError code to a string describing the error
  //! \todo add errno to returned string
  std::string BRErrorAsString(const BrInitError & err_)
  {
    std::string errMsg;
    switch (err_) {
    case BR_INIT_ERROR_NOMEM:
      errMsg = "Unable to open /proc/self/maps";
    case BR_INIT_ERROR_OPEN_MAPS:
      errMsg = "Unable to read from /proc/self/maps";
    case BR_INIT_ERROR_READ_MAPS:
      errMsg = "The file format of /proc/self/maps";
    case BR_INIT_ERROR_INVALID_MAPS:
      errMsg = "The file format of /proc/self/maps is invalid";
    case BR_INIT_ERROR_DISABLED:
      errMsg = "Binary relocation disabled";
    default:
      throw std::runtime_error("relocatable_lib.cc: Invalid BrInitError");
    }
    return errMsg;
  }

  bool _init_dirs = false;

  void init_directories()
  {
    // std::cerr << "\nbxdecay0: relocatable_lib.cc: init_directories entering" << std::endl;
    if (::_init_dirs) {
      return;
    }
    // std::cerr << "\nbxdecay0: relocatable_lib.cc: init_directories call br_init_lib" << std::endl;
    BrInitError brErr;
    int initSuccessful = br_init_lib(&brErr);
    if (initSuccessful != 1) {
      throw std::runtime_error("Initialization of BxDecay0 library's directories failed : "
                               + std::to_string(brErr) + " (" + BRErrorAsString(brErr) + ")");
    }
    ::_init_dirs = true;
  }

  // //! Return relative path from application directory to root of resource dir
  // std::string relative_lib_path_to_prefix_dir() {
  //   return "@BxDecay0_LIBDIR_TO_PREFIX@";
  // }

  std::string init_libdir()
  {
    // Strictly speaking, want a lock_guard here as BinReloc functions aren't threadsafe.
    // However, as we only call this function to initialize a static variable we should be o.k.
    // as C++11 should enforce this only being call once over all threads.
    init_directories();
    char* exePath = br_find_exe_dir("");
    std::string libDir(exePath);
    free(exePath);
    if (libDir.back() == '/') {
      libDir = libDir.substr(0, libDir.length() - 1);
    }
    return libDir;
  }
}

namespace bxdecay0 {

  std::string get_library_dir()
  {
    static std::string libPath(::init_libdir());
    return libPath;
    // boost::filesystem::path cLibPath = boost::filesystem::canonical(libPath);
    // return cLibPath_path.string();
  }

  // std::string get_prefix_dir()
  // {
  //   std::string libPath = get_library_dir();
  //   std::string prefixPath = libPath + "/" + ::relative_lib_path_to_prefix_dir();
  //   return prefixPath;
  // }

}
